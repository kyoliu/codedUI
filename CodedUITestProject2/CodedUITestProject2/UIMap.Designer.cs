// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfTabPage uIViveportTabPage = this.UIViveWindow.UI_tabControlTabList.UIViveportTabPage;
            WpfTabPage uI訂閱TabPage = this.UIViveWindow.UI_tabControlTabList.UI訂閱TabPage;
            WpfTabPage uI收藏庫TabPage = this.UIViveWindow.UI_tabControlTabList.UI收藏庫TabPage;
            WpfTabList uI_tabControlTabList = this.UIViveWindow.UI_tabControlTabList;
            #endregion

            // Launch '%ProgramFiles%\HTC\Viveport\Desktop\Vive.exe'
            ApplicationUnderTest uIViveWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UIViveWindowExePath, this.RecordedMethod1Params.UIViveWindowAlternateExePath);

            // Click 'Viveport' tab
            Mouse.Click(uIViveportTabPage, new Point(23, 42));

            // Click '訂閱' tab
            Mouse.Click(uI訂閱TabPage, new Point(42, 41));

            // Click '收藏庫' tab
            Mouse.Click(uI收藏庫TabPage, new Point(54, 26));

            // Click '_tabControl' tab list
            Mouse.Click(uI_tabControlTabList, new Point(651, 44));

            // Click '_tabControl' tab list
            Mouse.Click(uI_tabControlTabList, new Point(696, 34));

            // Click '_tabControl' tab list
            Mouse.Click(uI_tabControlTabList, new Point(732, 33));

            // Click '_tabControl' tab list
            Mouse.Click(uI_tabControlTabList, new Point(769, 40));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfText uI設定Text = this.UIViveWindow.UI_tabControlTabList.UI設定TabPage.UI設定Text;
            #endregion

            // Verify that the 'DisplayText' property of '設定' label equals '設定'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UI設定TextDisplayText, uI設定Text.DisplayText);
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public UIViveWindow UIViveWindow
        {
            get
            {
                if ((this.mUIViveWindow == null))
                {
                    this.mUIViveWindow = new UIViveWindow();
                }
                return this.mUIViveWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private UIViveWindow mUIViveWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%ProgramFiles%\HTC\Viveport\Desktop\Vive.exe'
        /// </summary>
        public string UIViveWindowExePath = "C:\\Program Files (x86)\\HTC\\Viveport\\Desktop\\Vive.exe";
        
        /// <summary>
        /// Launch '%ProgramFiles%\HTC\Viveport\Desktop\Vive.exe'
        /// </summary>
        public string UIViveWindowAlternateExePath = "%ProgramFiles%\\HTC\\Viveport\\Desktop\\Vive.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '設定' label equals '設定'
        /// </summary>
        public string UI設定TextDisplayText = "設定";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViveWindow : WpfWindow
    {
        
        public UIViveWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Vive";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Vive");
            #endregion
        }
        
        #region Properties
        public UI_tabControlTabList UI_tabControlTabList
        {
            get
            {
                if ((this.mUI_tabControlTabList == null))
                {
                    this.mUI_tabControlTabList = new UI_tabControlTabList(this);
                }
                return this.mUI_tabControlTabList;
            }
        }
        #endregion
        
        #region Fields
        private UI_tabControlTabList mUI_tabControlTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UI_tabControlTabList : WpfTabList
    {
        
        public UI_tabControlTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "_tabControl";
            this.WindowTitles.Add("Vive");
            #endregion
        }
        
        #region Properties
        public WpfTabPage UIViveportTabPage
        {
            get
            {
                if ((this.mUIViveportTabPage == null))
                {
                    this.mUIViveportTabPage = new WpfTabPage(this);
                    #region Search Criteria
                    this.mUIViveportTabPage.SearchProperties[WpfTabPage.PropertyNames.Name] = "Viveport";
                    this.mUIViveportTabPage.WindowTitles.Add("Vive");
                    #endregion
                }
                return this.mUIViveportTabPage;
            }
        }
        
        public WpfTabPage UI訂閱TabPage
        {
            get
            {
                if ((this.mUI訂閱TabPage == null))
                {
                    this.mUI訂閱TabPage = new WpfTabPage(this);
                    #region Search Criteria
                    this.mUI訂閱TabPage.SearchProperties[WpfTabPage.PropertyNames.Name] = "訂閱";
                    this.mUI訂閱TabPage.WindowTitles.Add("Vive");
                    #endregion
                }
                return this.mUI訂閱TabPage;
            }
        }
        
        public WpfTabPage UI收藏庫TabPage
        {
            get
            {
                if ((this.mUI收藏庫TabPage == null))
                {
                    this.mUI收藏庫TabPage = new WpfTabPage(this);
                    #region Search Criteria
                    this.mUI收藏庫TabPage.SearchProperties[WpfTabPage.PropertyNames.Name] = "收藏庫";
                    this.mUI收藏庫TabPage.WindowTitles.Add("Vive");
                    #endregion
                }
                return this.mUI收藏庫TabPage;
            }
        }
        
        public UI設定TabPage UI設定TabPage
        {
            get
            {
                if ((this.mUI設定TabPage == null))
                {
                    this.mUI設定TabPage = new UI設定TabPage(this);
                }
                return this.mUI設定TabPage;
            }
        }
        #endregion
        
        #region Fields
        private WpfTabPage mUIViveportTabPage;
        
        private WpfTabPage mUI訂閱TabPage;
        
        private WpfTabPage mUI收藏庫TabPage;
        
        private UI設定TabPage mUI設定TabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UI設定TabPage : WpfTabPage
    {
        
        public UI設定TabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "設定";
            this.WindowTitles.Add("Vive");
            #endregion
        }
        
        #region Properties
        public UI定Text UI定Text
        {
            get
            {
                if ((this.mUI定Text == null))
                {
                    this.mUI定Text = new UI定Text(this);
                }
                return this.mUI定Text;
            }
        }
        
        public WpfPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new WpfPane(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mUIItemPane.WindowTitles.Add("Vive");
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        
        public WpfText UI設定Text
        {
            get
            {
                if ((this.mUI設定Text == null))
                {
                    this.mUI設定Text = new WpfText(this);
                    #region Search Criteria
                    this.mUI設定Text.SearchProperties[WpfText.PropertyNames.AutomationId] = "t_general";
                    this.mUI設定Text.WindowTitles.Add("Vive");
                    #endregion
                }
                return this.mUI設定Text;
            }
        }
        #endregion
        
        #region Fields
        private UI定Text mUI定Text;
        
        private WpfPane mUIItemPane;
        
        private WpfText mUI設定Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UI定Text : WpfText
    {
        
        public UI定Text(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "定";
            this.WindowTitles.Add("Vive");
            #endregion
        }
        
        #region Properties
        public WpfCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SettingPage";
                    this.mUIItemCustom.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemCustom.WindowTitles.Add("Vive");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUIItemCustom;
        #endregion
    }
}
